# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/


add=lambda x,y: x+y
subtract=lambda x,y: x-y
multiply=lambda x,y: x*y
divide=lambda x,y: x/y
import math
from math import sin
sine=lambda x: round(math.sin(math.radians(x)),1)
from math import cos
cosine=lambda x: round(math.cos(math.radian(x)),1)
from math import tan
tan=lambda x: round(math.tan(math.radians(x)),1)
from math import log10
log=lambda x: log10(x)
print("Select operation.")
print("1. +")
print("2. -")
print("3. ×")
print("4. ÷")
print("5. sin")
print("6. cos")
print("7. tan")
print("8. Log")

while True:
       choice=input("Enter choice(1/2/3/4/5/6/7/8): ")

       if choice in ('1','2','3','4','5','6','7','8'):
          x=float(input("Enter first number "))
          y=float(input("Enter second number "))

          if choice=='1':
             print(x,"+",y,"=",add(x,y))
          elif choice=='2':
               print(x,"-",y,"=",subtract(x,y))
          elif choice=='3':
               print(x,"×",y,"=",multiply(x,y))
          elif choice=='4':
               print(x,"÷",y,"=",divide(x,y))
          elif choice=='5':
               print("sin(x)",sine(x))
          elif choice=='6':
               print("cos(x)",cosine(x))
          elif choice=='7':
               print("tan(x)",tan(x))
          elif choice=='8':
               print("log(x)",log10(x))

          next_calculation=input("Let's do another calculation (Yes/No)? ")
          if next_calculation =="No":
             break
       else:
            print("Invalid input")
